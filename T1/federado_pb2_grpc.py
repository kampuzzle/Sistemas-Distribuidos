# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import federado_pb2 as federado__pb2


class FederatedLearningStub(object):
    """Definir o serviço de aprendizado federado
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterClient = channel.unary_unary(
                '/main.FederatedLearning/RegisterClient',
                request_serializer=federado__pb2.RegisterClientRequest.SerializeToString,
                response_deserializer=federado__pb2.RegisterClientResponse.FromString,
                )
        self.StartTraining = channel.unary_unary(
                '/main.FederatedLearning/StartTraining',
                request_serializer=federado__pb2.StartTrainingRequest.SerializeToString,
                response_deserializer=federado__pb2.StartTrainingResponse.FromString,
                )
        self.EvaluateModel = channel.unary_unary(
                '/main.FederatedLearning/EvaluateModel',
                request_serializer=federado__pb2.EvaluateModelRequest.SerializeToString,
                response_deserializer=federado__pb2.EvaluateModelResponse.FromString,
                )


class FederatedLearningServicer(object):
    """Definir o serviço de aprendizado federado
    """

    def RegisterClient(self, request, context):
        """Registrar um cliente no servidor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTraining(self, request, context):
        """Iniciar o treinamento de um cliente
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvaluateModel(self, request, context):
        """Avaliar o modelo de um cliente
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FederatedLearningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=federado__pb2.RegisterClientRequest.FromString,
                    response_serializer=federado__pb2.RegisterClientResponse.SerializeToString,
            ),
            'StartTraining': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTraining,
                    request_deserializer=federado__pb2.StartTrainingRequest.FromString,
                    response_serializer=federado__pb2.StartTrainingResponse.SerializeToString,
            ),
            'EvaluateModel': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateModel,
                    request_deserializer=federado__pb2.EvaluateModelRequest.FromString,
                    response_serializer=federado__pb2.EvaluateModelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'main.FederatedLearning', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FederatedLearning(object):
    """Definir o serviço de aprendizado federado
    """

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.FederatedLearning/RegisterClient',
            federado__pb2.RegisterClientRequest.SerializeToString,
            federado__pb2.RegisterClientResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTraining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.FederatedLearning/StartTraining',
            federado__pb2.StartTrainingRequest.SerializeToString,
            federado__pb2.StartTrainingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EvaluateModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.FederatedLearning/EvaluateModel',
            federado__pb2.EvaluateModelRequest.SerializeToString,
            federado__pb2.EvaluateModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ClientLearningStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartTraining = channel.unary_unary(
                '/main.ClientLearning/StartTraining',
                request_serializer=federado__pb2.StartTrainingRequest.SerializeToString,
                response_deserializer=federado__pb2.StartTrainingResponse.FromString,
                )
        self.EvaluateModel = channel.unary_unary(
                '/main.ClientLearning/EvaluateModel',
                request_serializer=federado__pb2.EvaluateModelRequest.SerializeToString,
                response_deserializer=federado__pb2.EvaluateModelResponse.FromString,
                )


class ClientLearningServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartTraining(self, request, context):
        """Iniciar o treinamento de um cliente
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvaluateModel(self, request, context):
        """Avaliar o modelo de um cliente
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientLearningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartTraining': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTraining,
                    request_deserializer=federado__pb2.StartTrainingRequest.FromString,
                    response_serializer=federado__pb2.StartTrainingResponse.SerializeToString,
            ),
            'EvaluateModel': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateModel,
                    request_deserializer=federado__pb2.EvaluateModelRequest.FromString,
                    response_serializer=federado__pb2.EvaluateModelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'main.ClientLearning', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClientLearning(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartTraining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.ClientLearning/StartTraining',
            federado__pb2.StartTrainingRequest.SerializeToString,
            federado__pb2.StartTrainingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EvaluateModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.ClientLearning/EvaluateModel',
            federado__pb2.EvaluateModelRequest.SerializeToString,
            federado__pb2.EvaluateModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
